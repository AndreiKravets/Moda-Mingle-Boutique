"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _createSuper(i){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(i);return _possibleConstructorReturn(this,r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _wrapNativeSuper(e){var i="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==i){if(i.has(e))return i.get(e);i.set(e,t)}function t(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(t,e)})(e)}function _construct(e,t,i){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(e,t,i){var r=[null];r.push.apply(r,t);t=new(Function.bind.apply(e,r));return i&&_setPrototypeOf(t,i.prototype),t}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _isNativeFunction(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _defineProperty(e,t,i){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0===i)return("string"===t?String:Number)(e);i=i.call(e,t||"default");if("object"!==_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}!function r(n,o,s){function l(t,e){if(!o[t]){if(!n[t]){var i="function"==typeof require&&require;if(!e&&i)return i(t,!0);if(a)return a(t,!0);throw(e=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",e}i=o[t]={exports:{}},n[t][0].call(i.exports,function(e){return l(n[t][1][e]||e)},i,i.exports,r,n,o,s)}return o[t].exports}for(var a="function"==typeof require&&require,e=0;e<s.length;e++)l(s[e]);return l}({1:[function(e,t,i){customElements.get("s-images-scroll")||customElements.define("s-images-scroll",function(){_inherits(i,_wrapNativeSuper(HTMLElement));var t=_createSuper(i);function i(){var e;return _classCallCheck(this,i),_defineProperty(_assertThisInitialized(e=t.call(this)),"screenHeight",void 0),_defineProperty(_assertThisInitialized(e),"containerHeight",void 0),_defineProperty(_assertThisInitialized(e),"rowHeight",void 0),_defineProperty(_assertThisInitialized(e),"containerTopPosition",void 0),_defineProperty(_assertThisInitialized(e),"containerBottomPosition",void 0),_defineProperty(_assertThisInitialized(e),"elemContainer",e.querySelector(".s-images-scroll__container")),_defineProperty(_assertThisInitialized(e),"elemRow",e.querySelector(".s-images-scroll__row")),_defineProperty(_assertThisInitialized(e),"elemWrapperImages",e.querySelector(".s-images-scroll__images")),_defineProperty(_assertThisInitialized(e),"stepsArray",Array.from(e.querySelectorAll(".s-images-scroll__content_step"))),_defineProperty(_assertThisInitialized(e),"activeStepIndex",0),_defineProperty(_assertThisInitialized(e),"scrollEvent",!1),e.scrollBound=e.desktopScroll.bind(_assertThisInitialized(e)),e}return _createClass(i,[{key:"connectedCallback",value:function(){window.addEventListener("resize",this.resizeEvent.bind(this)),900<window.innerWidth&&(this.initVariables(),this.addStyles(),window.addEventListener("scroll",this.scrollBound),this.scrollEvent=!0)}},{key:"resizeEvent",value:function(){900<window.innerWidth?(this.initVariables(),this.addStyles(),this.scrollEvent||(window.addEventListener("scroll",this.scrollBound),this.scrollEvent=!0)):this.scrollEvent&&(window.removeEventListener("scroll",this.scrollBound),this.scrollEvent=!1,this.removeStylesAndClasses())}},{key:"desktopScroll",value:function(){this.toggleFixedSection(),this.translateImages(),this.switchSteps()}},{key:"initVariables",value:function(){this.screenHeight=document.documentElement.clientHeight,this.containerHeight=this.elemWrapperImages.offsetHeight,this.rowHeight=.8*this.screenHeight,this.containerTopPosition=.1*this.screenHeight,this.containerBottomPosition=this.containerHeight-this.rowHeight-this.containerTopPosition}},{key:"removeStylesAndClasses",value:function(){this.elemContainer.style.height="auto",this.elemRow.style.height="auto",this.elemRow.style.top="unset",this.elemRow.style.transform="translateY(0)",this.elemWrapperImages.style.transform="translateY(0)",this.elemRow.classList="s-images-scroll__row"}},{key:"addStyles",value:function(){this.elemContainer.style.height=this.containerHeight+"px",this.elemRow.style.height=this.rowHeight+"px",this.elemRow.style.top=this.containerTopPosition+"px"}},{key:"toggleFixedSection",value:function(){this.elemContainer.getBoundingClientRect().y<this.containerTopPosition?this.elemRow.classList.add("active"):this.elemRow.classList.value.includes("active")&&(this.elemRow.classList.remove("active"),this.elemWrapperImages.style.transform="translateY(0px)"),this.elemContainer.getBoundingClientRect().y<-this.containerBottomPosition?(this.elemRow.classList.add("active--bottom"),this.elemRow.style.transform="translateY("+(this.containerHeight-this.rowHeight)+"px)",this.elemWrapperImages.style.transform="translateY("+-(this.containerHeight-this.rowHeight)+"px)"):(this.elemRow.classList.remove("active--bottom"),this.elemRow.style.transform="translateY(0px)")}},{key:"translateImages",value:function(){2==this.elemRow.classList.length&&(this.elemWrapperImages.style.transform="translateY("+(this.elemContainer.getBoundingClientRect().y-this.containerTopPosition)+"px)")}},{key:"switchSteps",value:function(){var i=Math.abs(Math.round((this.elemContainer.offsetHeight+this.elemContainer.getBoundingClientRect().y)/(this.elemContainer.offsetHeight/this.stepsArray.length)-this.stepsArray.length));2==this.elemRow.classList.length&&this.activeStepIndex!=i&&(this.activeStepIndex=i,this.stepsArray.map(function(e,t){e.classList=t<i?"s-images-scroll__content_step s-images-scroll__content_step--top":i===t?"s-images-scroll__content_step s-images-scroll__content_step--active":"s-images-scroll__content_step s-images-scroll__content_step--bottom"}))}}]),i}())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
