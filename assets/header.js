"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _wrapNativeSuper(e){var n="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(t,e)})(e)}function _construct(e,t,n){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);t=new(Function.bind.apply(e,r));return n&&_setPrototypeOf(t,n.prototype),t}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _isNativeFunction(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}!function r(o,i,u){function c(t,e){if(!i[t]){if(!o[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(a)return a(t,!0);throw(e=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",e}n=i[t]={exports:{}},o[t][0].call(n.exports,function(e){return c(o[t][1][e]||e)},n,n.exports,r,o,i,u)}return i[t].exports}for(var a="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){customElements.get("s-header")||customElements.define("s-header",function(){_inherits(t,_wrapNativeSuper(HTMLElement));var e=_createSuper(t);function t(){return _classCallCheck(this,t),e.call(this)}return _createClass(t,[{key:"connectedCallback",value:function(){var t=this;this.megaMenus=Array.from(this.querySelectorAll(".s-mega-menu")),this.menuItems=this.querySelectorAll(".s-header__menu_item"),this.querySelector(".s-header__menu_btn").addEventListener("click",function(){return t.toggleMenuMobile(t)}),document.querySelector(".body-overlay").addEventListener("click",function(){return t.toggleMenuMobile(t)}),this.querySelector(".s-header__account_cart").addEventListener("click",this.openCartDrawer),PubSub.subscribe("cart-updated",this.updateCount.bind(this)),this.menuItems.forEach(function(e){t.addClassParentMenu(e),t.openMegaMenuMobile(e),t.openMegaMenuDesktop(e),t.closeMegaMenuDesktop(e)}),this.closeMegaMenuMobile(),this.querySelector(".s-header__open-search")&&this.querySelector(".s-header__open-search").addEventListener("click",function(){return t.openSearch()})}},{key:"openSearch",value:function(){PubSub.publish("open-search")}},{key:"openCartDrawer",value:function(){PubSub.publish("open-drawer")}},{key:"updateCount",value:function(){var t=this;fetch(window.theme.shopUrl+"/cart.js").then(function(e){return e.json()}).then(function(e){t.querySelector(".header_cart_count").innerHTML=e.item_count})}},{key:"addClassParentMenu",value:function(t){this.megaMenus.map(function(e){t.getElementsByTagName("a")[0].innerHTML==e.getAttribute("data-parent-menu")&&t.classList.add("s-header__menu_item--parent","s-header__menu_item--parent-megamenu")})}},{key:"openMegaMenuDesktop",value:function(e){var n=this;e.addEventListener("mouseover",function(t){n.megaMenus.map(function(e){t.target.innerHTML==e.getAttribute("data-parent-menu")&&e.classList.add("active")})})}},{key:"closeMegaMenuDesktop",value:function(e){var n=this;e.addEventListener("mouseout",function(t){n.megaMenus.map(function(e){t.target.innerHTML==e.getAttribute("data-parent-menu")&&e.classList.remove("active")})})}},{key:"toggleMenuMobile",value:function(e){document.querySelector(".body-overlay").classList.toggle("active"),e.querySelector(".s-header").classList.toggle("s-header--menu-active"),document.querySelector("body").classList.toggle("hidden"),e.querySelector(".s-header__menu").classList.remove("hide"),e.megaMenus.map(function(e){e.classList.remove("active")})}},{key:"openMegaMenuMobile",value:function(e){var n=this;e.querySelector(".s-header__menu_item_arrow").addEventListener("click",function(t){n.megaMenus.map(function(e){t.target.getAttribute("data-menu-name")==e.getAttribute("data-parent-menu")&&(e.classList.add("active"),n.querySelector(".s-header__menu").classList.add("hide"))})})}},{key:"closeMegaMenuMobile",value:function(){var t=this;this.querySelectorAll(".s-mega-menu__close").forEach(function(e){e.addEventListener("click",function(e){t.querySelector(".s-header__menu").classList.remove("hide"),t.megaMenus.map(function(e){e.classList.remove("active")})})})}}]),t}())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
